name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Run tests
        run: dart test

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Star Wars CLI ${{ steps.get_version.outputs.version }}
          body: |
            # Star Wars CLI ${{ steps.get_version.outputs.version }}

            ## üåü Features
            - Explore the Star Wars universe from your command line
            - Access all 6 SWAPI endpoints: films, people, planets, species, vehicles, starships
            - Random element selection for discovery
            - Beautiful formatted output with emojis
            - German language support

            ## üì¶ Downloads
            Download the appropriate executable for your platform below.

            ### macOS Users üçé
            The macOS executable is **professionally signed** with an Apple Developer Certificate and **notarized by Apple**.

            ‚úÖ **No security warnings** - trusted by macOS Gatekeeper
            ‚úÖ **Verified by Apple** - scanned for malware and safety
            ‚úÖ **Easy installation** - simply download and run

            ```bash
            # Download and run directly - no special steps needed!
            chmod +x swapi-cli-macos
            ./swapi-cli-macos
            ```

            ## üöÄ Usage
            ```bash
            # Show help
            ./swapi --help

            # Random element from random endpoint
            ./swapi

            # Show random species
            ./swapi species

            # Show random film
            ./swapi films
            ```

            ## üìã Changelog
            See the commit history for detailed changes in this release.

            ---
            May the Force be with you! ‚≠ê
          draft: false
          prerelease: false

  build-release:
    name: Build Release Assets
    needs: release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: swapi-cli-linux
            executable_extension: ''
          - os: windows-latest
            asset_name: swapi-cli-windows
            executable_extension: '.exe'
          - os: macos-latest
            asset_name: swapi-cli-macos
            executable_extension: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Build executable
        run: dart compile exe bin/swapi_cli.dart -o ${{ matrix.asset_name }}${{ matrix.executable_extension }}

      - name: Sign macOS executable (Professional Apple Developer)
        if: runner.os == 'macOS'
        run: |
          echo "üçé Starting professional Apple Developer Code Signing..."

          # Check if all required secrets are available
          if [ -z "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" ]; then
            echo "‚ùå APPLE_CERTIFICATE_BASE64 secret not found!"
            exit 1
          fi

          if [ -z "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" ]; then
            echo "‚ùå APPLE_CERTIFICATE_PASSWORD secret not found!"
            exit 1
          fi

          if [ -z "${{ secrets.KEYCHAIN_PASSWORD }}" ]; then
            echo "‚ùå KEYCHAIN_PASSWORD secret not found!"
            exit 1
          fi

          # Import Apple Developer Certificate
          echo "üì• Importing Apple Developer Certificate..."
          echo "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12

          # Create temporary keychain
          echo "üîê Creating temporary keychain..."
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Import certificate into keychain
          echo "üìã Importing certificate into keychain..."
          security import certificate.p12 \
            -k build.keychain \
            -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" \
            -T /usr/bin/codesign

          # Set partition list to allow codesign access
          echo "üîì Setting keychain permissions..."
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" \
            build.keychain

          # Find the certificate identity using hash (more reliable)
          echo "üîç Looking for Developer ID Application certificate..."
          security find-identity -v -p codesigning build.keychain

          CERTIFICATE_HASH=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -1 | awk '{print $2}')
          echo "Using certificate hash: $CERTIFICATE_HASH"

          if [ -z "$CERTIFICATE_HASH" ]; then
            echo "‚ùå No Developer ID Application certificate found!"
            echo "Available certificates:"
            security find-identity -v build.keychain
            exit 1
          fi

          # Sign the executable with hardened runtime
          echo "üñäÔ∏è Signing executable with certificate: $CERTIFICATE_HASH"
          codesign --force --deep \
            --sign "$CERTIFICATE_HASH" \
            --options runtime \
            --entitlements entitlements.plist \
            --timestamp \
            ${{ matrix.asset_name }}${{ matrix.executable_extension }}

          # Verify signature
          echo "üîç Verifying signature..."
          codesign --verify --deep --strict --verbose=2 ${{ matrix.asset_name }}${{ matrix.executable_extension }}

          # Create an app bundle structure for proper notarization
          echo "üì¶ Creating app bundle for notarization..."
          APP_NAME="SwapiCLI"
          mkdir -p "${APP_NAME}.app/Contents/MacOS"
          mkdir -p "${APP_NAME}.app/Contents/Resources"
          
          # Copy executable to app bundle
          cp ${{ matrix.asset_name }}${{ matrix.executable_extension }} "${APP_NAME}.app/Contents/MacOS/${APP_NAME}"
          
          # Create Info.plist for the app bundle
          cat > "${APP_NAME}.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>${APP_NAME}</string>
              <key>CFBundleIdentifier</key>
              <string>com.dnl-jst.swapi-cli</string>
              <key>CFBundleName</key>
              <string>Star Wars CLI</string>
              <key>CFBundleVersion</key>
              <string>1.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
              <key>LSUIElement</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Sign the app bundle
          echo "üñäÔ∏è Signing app bundle..."
          codesign --force --deep \
            --sign "$CERTIFICATE_HASH" \
            --options runtime \
            --entitlements entitlements.plist \
            --timestamp \
            "${APP_NAME}.app"
          
          # Verify app bundle signature
          echo "üîç Verifying app bundle signature..."
          codesign --verify --deep --strict --verbose=2 "${APP_NAME}.app"

          # Create ZIP for notarization with app bundle
          echo "üì¶ Creating ZIP for notarization with app bundle..."
          zip -r ${{ matrix.asset_name }}-app-bundle.zip "${APP_NAME}.app"

          # Submit for notarization with app bundle
          echo "üì® Submitting app bundle to Apple for notarization..."
          xcrun notarytool submit ${{ matrix.asset_name }}-app-bundle.zip \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait

          echo "‚úÖ Notarization completed successfully!"

          # Staple the app bundle
          echo "üé´ Stapling notarization ticket to app bundle..."
          STAPLE_RESULT=0
          xcrun stapler staple "${APP_NAME}.app" || STAPLE_RESULT=$?

          if [ $STAPLE_RESULT -eq 0 ]; then
            echo "‚úÖ Stapling successful!"
            
            # Extract the stapled executable from app bundle for release
            echo "üì¶ Extracting stapled executable from app bundle..."
            cp "${APP_NAME}.app/Contents/MacOS/${APP_NAME}" ${{ matrix.asset_name }}${{ matrix.executable_extension }}
            
            # Re-sign the extracted executable to maintain valid signature
            echo "üñäÔ∏è Re-signing extracted executable..."
            codesign --force --deep \
              --sign "$CERTIFICATE_HASH" \
              --options runtime \
              --entitlements entitlements.plist \
              --timestamp \
              ${{ matrix.asset_name }}${{ matrix.executable_extension }}
            
            # Verify the final executable passes all security checks
            echo "üîç Final security verification..."
            spctl --assess --type exec --verbose ${{ matrix.asset_name }}${{ matrix.executable_extension }}

          else
            echo "‚ö†Ô∏è Stapling failed with exit code: $STAPLE_RESULT"
            echo "üìã Checking stapler validate for debugging..."
            xcrun stapler validate "${APP_NAME}.app" || true
            
            echo "üìã App bundle may still be notarized even without stapling..."
            spctl --assess --type exec --verbose "${APP_NAME}.app" || echo "App bundle assessment completed"
            
            # Use the original signed executable if stapling failed
            echo "üìã Using original signed executable since app bundle stapling failed..."
          fi

          # Cleanup sensitive files
          echo "üßπ Cleaning up..."
          security delete-keychain build.keychain
          rm certificate.p12
          rm -rf ${{ matrix.asset_name }}-app-bundle.zip
          rm -rf "${APP_NAME}.app"

          echo "üéâ Professional code signing process completed!"

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.release.outputs.version }}
          files: ./${{ matrix.asset_name }}${{ matrix.executable_extension }}

  notify-release:
    name: Notify Release Success
    needs: [release, build-release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "üéâ Release ${{ needs.release.outputs.version }} completed successfully!"
          echo "‚úÖ Release created"
          echo "‚úÖ Executables built for Linux, Windows, and macOS"
          echo "‚úÖ macOS executable professionally signed and notarized by Apple"
          echo "‚úÖ Assets uploaded to GitHub Release"
          echo "‚úÖ Homebrew Formula automatically updated"
          echo ""
          echo "üçé macOS users get a completely trusted, security-warning-free experience!"
          echo "üç∫ Homebrew users can install with: brew install dnl-jst/tap/swapi-cli"
          echo ""
          echo "Users can now download the latest version from:"
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.version }}"

  update-homebrew:
    name: Update Homebrew Formula
    needs: [release, build-release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Debug release info
        run: |
          echo "üç∫ Starting Homebrew Formula update..."
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "Repository: ${{ github.repository }}"

      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v2
        with:
          formula-name: swapi-cli
          formula-path: Formula/swapi-cli.rb
          homebrew-tap: dnl-jst/homebrew-tap
          download-url: "https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.version }}/swapi-cli-macos"
          commit-message: |
            Update swapi-cli to ${{ needs.release.outputs.version }}

            Automatically updated by GitHub Actions
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Homebrew update success
        run: |
          echo "‚úÖ Homebrew Formula updated successfully!"
          echo "üç∫ Users can now install with: brew install dnl-jst/tap/swapi-cli"
