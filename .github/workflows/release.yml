name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Run tests
        run: dart test

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Star Wars CLI ${{ steps.get_version.outputs.version }}
          body: |
            # Star Wars CLI ${{ steps.get_version.outputs.version }}

            ## 🌟 Features
            - Explore the Star Wars universe from your command line
            - Access all 6 SWAPI endpoints: films, people, planets, species, vehicles, starships
            - Random element selection for discovery
            - Beautiful formatted output with emojis
            - German language support

            ## 📦 Downloads
            Download the appropriate executable for your platform below.

            ### macOS Users 🍎
            The macOS executable is **professionally signed** with an Apple Developer Certificate and **notarized by Apple**.

            ✅ **No security warnings** - trusted by macOS Gatekeeper
            ✅ **Verified by Apple** - scanned for malware and safety
            ✅ **Easy installation** - simply download and run

            ```bash
            # Download and run directly - no special steps needed!
            chmod +x swapi-cli-macos
            ./swapi-cli-macos
            ```

            ## 🚀 Usage
            ```bash
            # Show help
            ./swapi --help

            # Random element from random endpoint
            ./swapi

            # Show random species
            ./swapi species

            # Show random film
            ./swapi films
            ```

            ## 📋 Changelog
            See the commit history for detailed changes in this release.

            ---
            May the Force be with you! ⭐
          draft: false
          prerelease: false

  build-release:
    name: Build Release Assets
    needs: release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: swapi-cli-linux
            executable_extension: ''
          - os: windows-latest
            asset_name: swapi-cli-windows
            executable_extension: '.exe'
          - os: macos-latest
            asset_name: swapi-cli-macos
            executable_extension: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Build executable
        run: dart compile exe bin/swapi_cli.dart -o ${{ matrix.asset_name }}${{ matrix.executable_extension }}

      - name: Sign macOS executable (Professional Apple Developer)
        if: runner.os == 'macOS'
        run: |
          echo "🍎 Starting professional Apple Developer Code Signing..."

          # Check if all required secrets are available
          if [ -z "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" ]; then
            echo "❌ APPLE_CERTIFICATE_BASE64 secret not found!"
            exit 1
          fi

          if [ -z "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" ]; then
            echo "❌ APPLE_CERTIFICATE_PASSWORD secret not found!"
            exit 1
          fi

          if [ -z "${{ secrets.KEYCHAIN_PASSWORD }}" ]; then
            echo "❌ KEYCHAIN_PASSWORD secret not found!"
            exit 1
          fi

          # Import Apple Developer Certificate
          echo "📥 Importing Apple Developer Certificate..."
          echo "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12

          # Create temporary keychain
          echo "🔐 Creating temporary keychain..."
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

          # Import certificate into keychain
          echo "📋 Importing certificate into keychain..."
          security import certificate.p12 \
            -k build.keychain \
            -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" \
            -T /usr/bin/codesign

          # Set partition list to allow codesign access
          echo "🔓 Setting keychain permissions..."
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" \
            build.keychain

          # Find the certificate identity using hash (more reliable)
          echo "🔍 Looking for Developer ID Application certificate..."
          security find-identity -v -p codesigning build.keychain

          CERTIFICATE_HASH=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -1 | awk '{print $2}')
          echo "Using certificate hash: $CERTIFICATE_HASH"

          if [ -z "$CERTIFICATE_HASH" ]; then
            echo "❌ No Developer ID Application certificate found!"
            echo "Available certificates:"
            security find-identity -v build.keychain
            exit 1
          fi

          # Sign the executable with hardened runtime and unique identifier
          echo "🖊️ Signing executable with certificate: $CERTIFICATE_HASH"
          codesign --force --deep \
            --sign "$CERTIFICATE_HASH" \
            --options runtime \
            --identifier "com.dnl-jst.swapi-cli" \
            --entitlements entitlements.plist \
            --timestamp \
            ${{ matrix.asset_name }}${{ matrix.executable_extension }}

          # Verify signature
          echo "🔍 Verifying signature..."
          codesign --verify --deep --strict --verbose=2 ${{ matrix.asset_name }}${{ matrix.executable_extension }}

          # Create ZIP for direct notarization (no app bundle needed for CLI tools)
          echo "📦 Creating ZIP for notarization..."
          zip -r ${{ matrix.asset_name }}-signed.zip ${{ matrix.asset_name }}${{ matrix.executable_extension }}

          # Submit for notarization directly
          echo "📨 Submitting to Apple for notarization..."
          xcrun notarytool submit ${{ matrix.asset_name }}-signed.zip \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait

          echo "✅ Notarization completed successfully!"

          # Note: Direct executable stapling is not supported by Apple
          # CLI tools rely on online notarization verification instead
          echo "📋 Note: CLI tools use online notarization verification (no stapling needed)"
          echo "📋 The executable is properly signed and notarized by Apple"
          
          # Verify final signature with identifier
          echo "🔍 Final signature verification..."
          codesign --verify --deep --strict --verbose=2 ${{ matrix.asset_name }}${{ matrix.executable_extension }}
          
          # Display signature details for verification
          echo "� Signature details:"
          codesign -dv ${{ matrix.asset_name }}${{ matrix.executable_extension }}

          # Test executable functionality
          echo "🔍 Testing executable functionality..."
          if ./${{ matrix.asset_name }}${{ matrix.executable_extension }} --version 2>/dev/null || ./${{ matrix.asset_name }}${{ matrix.executable_extension }} --help 2>/dev/null; then
            echo "✅ Executable is functional and properly signed!"
          else
            echo "⚠️ Executable test failed, but signature is valid"
          fi

          # Cleanup sensitive files
          echo "🧹 Cleaning up..."
          security delete-keychain build.keychain
          rm certificate.p12
          rm -rf ${{ matrix.asset_name }}-signed.zip

          echo "🎉 Professional code signing process completed!"

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.release.outputs.version }}
          files: ./${{ matrix.asset_name }}${{ matrix.executable_extension }}

  notify-release:
    name: Notify Release Success
    needs: [release, build-release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "🎉 Release ${{ needs.release.outputs.version }} completed successfully!"
          echo "✅ Release created"
          echo "✅ Executables built for Linux, Windows, and macOS"
          echo "✅ macOS executable professionally signed and notarized by Apple"
          echo "✅ Assets uploaded to GitHub Release"
          echo "✅ Homebrew Formula automatically updated"
          echo ""
          echo "🍎 macOS users get a completely trusted, security-warning-free experience!"
          echo "🍺 Homebrew users can install with: brew install dnl-jst/tap/swapi-cli"
          echo ""
          echo "Users can now download the latest version from:"
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.version }}"

  update-homebrew:
    name: Update Homebrew Formula
    needs: [release, build-release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Debug release info
        run: |
          echo "🍺 Starting Homebrew Formula update..."
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "Repository: ${{ github.repository }}"

      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v2
        with:
          formula-name: swapi-cli
          formula-path: Formula/swapi-cli.rb
          homebrew-tap: dnl-jst/homebrew-tap
          download-url: "https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.version }}/swapi-cli-macos"
          commit-message: |
            Update swapi-cli to ${{ needs.release.outputs.version }}

            Automatically updated by GitHub Actions
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Homebrew update success
        run: |
          echo "✅ Homebrew Formula updated successfully!"
          echo "🍺 Users can now install with: brew install dnl-jst/tap/swapi-cli"
