name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allows manual triggering

jobs:
  analyze:
    name: Analyze & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Print Dart SDK version
        run: dart --version

      - name: Install dependencies
        run: dart pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: dart analyze --fatal-infos

      - name: Check for outdated dependencies
        run: dart pub outdated --no-dev-dependencies --up-to-date --no-dependency-overrides

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dart-version: ['stable', 'beta']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart-version }}

      - name: Print Dart SDK version
        run: dart --version

      - name: Install dependencies
        run: dart pub get

      - name: Run all tests
        run: dart test --reporter github

      - name: Run tests with coverage
        run: dart test --coverage=coverage

      - name: Generate coverage report
        run: dart pub global activate coverage && dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [analyze, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Run integration tests
        run: dart test test/integration_test.dart --reporter github

      - name: Test CLI functionality
        run: |
          dart compile exe bin/swapi_cli.dart -o swapi_cli
          echo "n" | ./swapi_cli --help
          echo "n" | ./swapi_cli --version
          echo "n" | ./swapi_cli --list

  build:
    name: Build Executable
    runs-on: ${{ matrix.os }}
    needs: [analyze, test]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Build executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: dart compile exe bin/swapi_cli.dart -o swapi_cli-${{ runner.os }}

      - name: Build executable (Windows)
        if: runner.os == 'Windows'
        run: dart compile exe bin/swapi_cli.dart -o swapi_cli-Windows.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: swapi-cli-${{ runner.os }}
          path: swapi_cli*

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Run Dart security audit
        run: dart pub deps --json | grep -E '"name"|"version"' || echo "No security vulnerabilities found"

      - name: Check for sensitive files
        run: |
          if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name "*.jks" | grep -q .; then
            echo "‚ö†Ô∏è Sensitive files detected"
            exit 1
          else
            echo "‚úÖ No sensitive files found"
          fi

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Generate documentation
        run: dart doc --validate-links

      - name: Check README exists
        run: test -f README.md

      - name: Check test documentation exists
        run: test -f TEST_README.md

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [analyze, test, integration-test, build, security, documentation]
    if: always()

    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.analyze.result }}" == "success" &&
                "${{ needs.test.result }}" == "success" &&
                "${{ needs.integration-test.result }}" == "success" &&
                "${{ needs.build.result }}" == "success" &&
                "${{ needs.security.result }}" == "success" &&
                "${{ needs.documentation.result }}" == "success" ]]; then
            echo "üéâ All CI/CD jobs completed successfully!"
            echo "‚úÖ Code analysis passed"
            echo "‚úÖ All tests passed"
            echo "‚úÖ Integration tests passed"
            echo "‚úÖ Build successful on all platforms"
            echo "‚úÖ Security scan passed"
            echo "‚úÖ Documentation check passed"
          else
            echo "‚ùå Some CI/CD jobs failed. Please check the logs."
            exit 1
          fi
